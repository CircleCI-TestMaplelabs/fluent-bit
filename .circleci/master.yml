version: 2.1

### Import required orbs
orbs:
  maven: circleci/maven@1.2.0
  orbsdk: snappyflow/orbsdk@1.9.58
  vulnerability-checker: whitesource/vulnerability-checker@19.10.1

### Filters for branch and tags
filters: &filters
  tags:
    only: /.*/

### Custom job executor
executors:
  circlecienv:
    docker:
      - image: snappyflowml/circlecienv:v2.0.0
        auth:
          username: "${DOCKERUSER}"
          password: $DOCKERPASSWORD
  pluginsenv:
    docker:
      - image: snappyflowml/pluginsenv:v1
  centos7:
    docker:
      - image: centos:centos7  
  centos8:
    docker:
      - image: centos:centos8.4.2105
  ubuntu14:
    docker:
      - image: ubuntu:14.04 
  ubuntu18:
    docker:
      - image: ubuntu:18.04 
  ubuntu20:
    docker:
      - image: ubuntu:20.04  
  ubuntu22:
    docker:
      - image: ubuntu:22.04                                   
  ubuntumachineimage:
    machine:
      image: ubuntu-2204:2022.04.2

### Pipeline parameters
parameters:
  run-fluentBit-job:
    type: boolean
    default: false   
  tag-gen-command:
    type: string
    default: |
              function parse_yaml {
                local prefix=$2
                local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
                sed -ne "s|^\($s\):|\1|" \
                      -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
                      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
                awk -F$fs '{
                    indent = length($1)/2;
                    vname[indent] = $2;
                    for (i in vname) {if (i > indent) {delete vname[i]}}
                    if (length($3) > 0) {
                      vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                      printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
                    }
                }'
              }
              ls
              eval $(parse_yaml "version.yaml")
              echo "${AppVersion}"
              GIT_BRANCH=<<pipeline.git.branch>>
              VERSION=$(echo ${AppVersion} | sed 's/\./-/g')
              a=${GIT_BRANCH}-${VERSION}
              SFAGENT_VERSION=$(echo ${AppVersion})
              echo "SFAGENT_VERSION=$SFAGENT_VERSION" >> $BASH_ENV
              TAG=$(echo -n $a | tr -c -s '[:alnum:]' '-')
              echo $TAG
              echo "IMAGETAG=$TAG" >> $BASH_ENV  

###Pipeline Jobs
jobs:
  ### updateBaseRevision: This job updates the BASE_REVISION env in context
  updateBaseRevision:
    executor: ubuntumachineimage
    steps:
      - run:
           command: |
             BRANCH=<<pipeline.git.branch>>
             GIT_BRANCH=$(echo -n $BRANCH | tr -c -s '[:alnum:]' '_')
             curl -XPOST https://circleci.com/api/v2/project/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/envvar --header "Content-Type: application/json" --header "Circle-Token: $CIRCLE_CI_TOKEN" --data '{"name":"'"${GIT_BRANCH}"'", "value": "'"${CIRCLE_SHA1}"'"}'
  reTagSubcomponents:
    executor: ubuntumachineimage
    steps:
      - checkout
      - run: 
          command: << pipeline.parameters.tag-gen-command >>
      - orbsdk/retag_subcomponents:
          dockeruser: "${DOCKERUSER}"
          dockerpassword: "${DOCKERPASSWORD}"
          dockerrepository: "${DOCKERUSER}"
          cluster: non-production
          imagetag: "${IMAGETAG}"
          snappyflowversion: "${SFTAG}"
          gitbranch: <<pipeline.git.branch>>
          components: 'sfagent sfagent-arm'                                
  fluentBitBuildcentos7:
    executor: centos7
    steps:
      - checkout
      - run: 
          command: << pipeline.parameters.tag-gen-command >>
      - run: 
          command: |
                    export DEBIAN_FRONTEND=noninteractive           
                    yum update -y
                    yum remove openssl -y
                    yum install make wget -y  
                    yum install cmake make gcc glibc-devel gcc-c++ flex bison zlib-devel libcurl-devel libmaxminddb-devel libtool automake -y
                    yum groupinstall "Development Tools" -y
                    mkdir -p build
                    cd build
                    cmake -DFLB_DEBUG=On -DFLB_TRACE=Off -DFLB_JEMALLOC=On -DFLB_TLS=On -DFLB_SHARED_LIB=Off -DFLB_EXAMPLES=Off -DFLB_HTTP_SERVER=On -DFLB_IN_SYSTEMD=On -DFLB_OUT_KAFKA=On ../
                    make     
                    ls  
      - store_artifacts:
          path: build/bin/fluent-bit                  
  fluentBitBuildcentos8:
    executor: centos8
    steps:
      - checkout
      - run: 
          command: << pipeline.parameters.tag-gen-command >>
      - run: 
          command: |
                    yum update -y
                    yum install make wget -y  
                    yum groupinstall "Development Tools" -y
                    yum install flex bison gcc g++ ncurses-devel libarchive-devel -y
                    yum remove openssl -y
                    wget http://www.cmake.org/files/v3.2/cmake-3.2.2.tar.gz
                    tar -xf cmake-3.2.2.tar.gz
                    cd cmake-3.2.2
                    ./configure
                    make  
                    make install
                    cd ..
                    rm -rf cmake-3.2.2*
                    mkdir -p build
                    cd build
                    cmake ../
                    make     
                    ls   
      - store_artifacts:
          path: build/bin/fluent-bit                                                                           
  fluentBitBuildubuntu14:
    executor: ubuntu14
    steps:
      - checkout
      - run: 
          command: << pipeline.parameters.tag-gen-command >>
      - run: 
          command: |
                    export FLB_MAJOR=1
                    export FLB_MINOR=7
                    export FLB_PATCH=5
                    export FLB_VERSION=1.7.5
                    export DEBIAN_FRONTEND=noninteractive          
                    apt update -y
                    apt install make wget -y  
                    apt install build-essential -y
                    apt install cmake gcc g++ flex bison zlib1g-dev libmaxminddb-dev libtool automake -y --no-install-recommends
                    apt remove openssl -y
                    mkdir -p build
                    cd build
                    cmake -DFLB_DEBUG=On -DFLB_TRACE=Off -DFLB_JEMALLOC=On -DFLB_TLS=On -DFLB_SHARED_LIB=Off -DFLB_EXAMPLES=Off -DFLB_HTTP_SERVER=On -DFLB_IN_SYSTEMD=On -DFLB_OUT_KAFKA=On ../
                    make     
                    ls 
      - store_artifacts:
          path: build/bin/fluent-bit                   
  fluentBitBuildubuntu18:
    executor: ubuntu18
    steps:
      - checkout
      - run: 
          command: << pipeline.parameters.tag-gen-command >>
      - run: 
          command: |
                    export FLB_MAJOR=1
                    export FLB_MINOR=7
                    export FLB_PATCH=5
                    export FLB_VERSION=1.7.5
                    export DEBIAN_FRONTEND=noninteractive

                    apt update -y
                    apt install make wget -y  
                    apt install build-essential -y
                    apt install flex bison gcc g++ cmake libssl1.0-dev libasl-dev libsasl2-dev pkg-config libsystemd-dev zlib1g-dev ca-certificates -y --no-install-recommends
                    apt remove openssl -y
                    mkdir -p build
                    cd build
                    cmake ../
                    make     
                    ls 
      - store_artifacts:
          path: build/bin/fluent-bit                    
  fluentBitBuildubuntu20:
    executor: ubuntu20
    steps:
      - checkout
      - run: 
          command: << pipeline.parameters.tag-gen-command >>
      - run: 
          command: |
                    export FLB_MAJOR=1
                    export FLB_MINOR=7
                    export FLB_PATCH=5
                    export FLB_VERSION=1.7.5
                    export DEBIAN_FRONTEND=noninteractive          
                    apt update -y
                    apt install make wget -y  
                    apt install build-essential -y
                    apt install gcc g++ cmake flex bison zlib1g-dev libmaxminddb-dev libtool automake -y --no-install-recommends
                    apt remove openssl -y
                    mkdir -p build
                    cd build
                    cmake -DFLB_DEBUG=On -DFLB_TRACE=Off -DFLB_JEMALLOC=On -DFLB_TLS=On -DFLB_SHARED_LIB=Off -DFLB_EXAMPLES=Off -DFLB_HTTP_SERVER=On -DFLB_IN_SYSTEMD=On -DFLB_OUT_KAFKA=On ../
                    make     
                    ls
      - store_artifacts:
          path: build/bin/fluent-bit                    
  fluentBitBuildubuntu22:
    executor: ubuntu22
    steps:
      - checkout
      - run: 
          command: << pipeline.parameters.tag-gen-command >>
      - run: 
          command: |
                    export FLB_MAJOR=1
                    export FLB_MINOR=7
                    export FLB_PATCH=5
                    export FLB_VERSION=1.7.5
                    export DEBIAN_FRONTEND=noninteractive          
                    apt update -y
                    apt install make wget  -y
                    apt install build-essential -y  
                    apt install gcc g++ cmake flex bison zlib1g-dev libmaxminddb-dev libtool automake -y --no-install-recommends
                    apt remove openssl -y
                    mkdir -p build
                    cd build
                    cmake -DFLB_DEBUG=On -DFLB_TRACE=Off -DFLB_JEMALLOC=On -DFLB_TLS=On -DFLB_SHARED_LIB=Off -DFLB_EXAMPLES=Off -DFLB_HTTP_SERVER=On -DFLB_IN_SYSTEMD=On -DFLB_OUT_KAFKA=On ../
                    make     
                    ls 
      - store_artifacts:
          path: build/bin/fluent-bit                                                                                                                                                                                            
### Pipeline Workflows
workflows:   
  fluentBitcentos7:
    when:
      equal: [true, << pipeline.parameters.run-fluentBit-job >>]
    jobs:   
      - vulnerability-checker/scan:
          name: Check_Opensource_Vulnerabilities
          context: Build_Env_Vars
          filters: *filters
          directory: .
      - hold:
          name: Waiting_For_Approval_For_Docker_Build
          filters: *filters
          type: approval
      - orbsdk/approver_verification:
          name: Verifying_Approver_For_Docker_Build
          context: Build_Env_Vars
          filters: *filters
          workflowid: ${CIRCLE_WORKFLOW_ID}
          ccitoken: ${CIRCLE_CI_TOKEN}
          approvers: 'Aman-Singh-ML Pradeep-G-ML Srivathsa-Mugalodi-ML Asraf-Khan-ML Sai-Devireddy-ML Nagarjuna-B-ML Deepa-Martin-ML'
          requires:
            - Waiting_For_Approval_For_Docker_Build              
      - fluentBitBuildcentos7:
          name: fluentBit_Build
          context: Build_Env_Vars
          filters: *filters    
  fluentBitcentos8:
    when:
      equal: [true, << pipeline.parameters.run-fluentBit-job >>]
    jobs:   
      - vulnerability-checker/scan:
          name: Check_Opensource_Vulnerabilities
          context: Build_Env_Vars
          filters: *filters
          directory: .
      - hold:
          name: Waiting_For_Approval_For_Docker_Build
          filters: *filters
          type: approval
      - orbsdk/approver_verification:
          name: Verifying_Approver_For_Docker_Build
          context: Build_Env_Vars
          filters: *filters
          workflowid: ${CIRCLE_WORKFLOW_ID}
          ccitoken: ${CIRCLE_CI_TOKEN}
          approvers: 'Aman-Singh-ML Pradeep-G-ML Srivathsa-Mugalodi-ML Asraf-Khan-ML Sai-Devireddy-ML Nagarjuna-B-ML Deepa-Martin-ML'
          requires:
            - Waiting_For_Approval_For_Docker_Build              
      - fluentBitBuildcentos8:
          name: fluentBit_Build
          context: Build_Env_Vars
          filters: *filters 
  fluentBitubuntu14:
    when:
      equal: [true, << pipeline.parameters.run-fluentBit-job >>]
    jobs:   
      - vulnerability-checker/scan:
          name: Check_Opensource_Vulnerabilities
          context: Build_Env_Vars
          filters: *filters
          directory: .
      - hold:
          name: Waiting_For_Approval_For_Docker_Build
          filters: *filters
          type: approval
      - orbsdk/approver_verification:
          name: Verifying_Approver_For_Docker_Build
          context: Build_Env_Vars
          filters: *filters
          workflowid: ${CIRCLE_WORKFLOW_ID}
          ccitoken: ${CIRCLE_CI_TOKEN}
          approvers: 'Aman-Singh-ML Pradeep-G-ML Srivathsa-Mugalodi-ML Asraf-Khan-ML Sai-Devireddy-ML Nagarjuna-B-ML Deepa-Martin-ML'
          requires:
            - Waiting_For_Approval_For_Docker_Build              
      - fluentBitBuildubuntu14:
          name: fluentBit_Build
          context: Build_Env_Vars
          filters: *filters 
  fluentBitubuntu18:
    when:
      equal: [true, << pipeline.parameters.run-fluentBit-job >>]
    jobs:   
      - vulnerability-checker/scan:
          name: Check_Opensource_Vulnerabilities
          context: Build_Env_Vars
          filters: *filters
          directory: .
      - hold:
          name: Waiting_For_Approval_For_Docker_Build
          filters: *filters
          type: approval
      - orbsdk/approver_verification:
          name: Verifying_Approver_For_Docker_Build
          context: Build_Env_Vars
          filters: *filters
          workflowid: ${CIRCLE_WORKFLOW_ID}
          ccitoken: ${CIRCLE_CI_TOKEN}
          approvers: 'Aman-Singh-ML Pradeep-G-ML Srivathsa-Mugalodi-ML Asraf-Khan-ML Sai-Devireddy-ML Nagarjuna-B-ML Deepa-Martin-ML'
          requires:
            - Waiting_For_Approval_For_Docker_Build              
      - fluentBitBuildubuntu18:
          name: fluentBit_Build
          context: Build_Env_Vars
          filters: *filters
  fluentBitubuntu20:
    when:
      equal: [true, << pipeline.parameters.run-fluentBit-job >>]
    jobs:   
      - vulnerability-checker/scan:
          name: Check_Opensource_Vulnerabilities
          context: Build_Env_Vars
          filters: *filters
          directory: .
      - hold:
          name: Waiting_For_Approval_For_Docker_Build
          filters: *filters
          type: approval
      - orbsdk/approver_verification:
          name: Verifying_Approver_For_Docker_Build
          context: Build_Env_Vars
          filters: *filters
          workflowid: ${CIRCLE_WORKFLOW_ID}
          ccitoken: ${CIRCLE_CI_TOKEN}
          approvers: 'Aman-Singh-ML Pradeep-G-ML Srivathsa-Mugalodi-ML Asraf-Khan-ML Sai-Devireddy-ML Nagarjuna-B-ML Deepa-Martin-ML'
          requires:
            - Waiting_For_Approval_For_Docker_Build              
      - fluentBitBuildubuntu20:
          name: fluentBit_Build
          context: Build_Env_Vars
          filters: *filters  
  fluentBitubuntu22:
    when:
      equal: [true, << pipeline.parameters.run-fluentBit-job >>]
    jobs:   
      - vulnerability-checker/scan:
          name: Check_Opensource_Vulnerabilities
          context: Build_Env_Vars
          filters: *filters
          directory: .
      - hold:
          name: Waiting_For_Approval_For_Docker_Build
          filters: *filters
          type: approval
      - orbsdk/approver_verification:
          name: Verifying_Approver_For_Docker_Build
          context: Build_Env_Vars
          filters: *filters
          workflowid: ${CIRCLE_WORKFLOW_ID}
          ccitoken: ${CIRCLE_CI_TOKEN}
          approvers: 'Aman-Singh-ML Pradeep-G-ML Srivathsa-Mugalodi-ML Asraf-Khan-ML Sai-Devireddy-ML Nagarjuna-B-ML Deepa-Martin-ML'
          requires:
            - Waiting_For_Approval_For_Docker_Build              
      - fluentBitBuildubuntu22:
          name: fluentBit_Build
          context: Build_Env_Vars
          filters: *filters                  